version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      - REPOSITORY_URI=$ECR_REGISTRY/$ECR_REPOSITORY
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Updating Kubernetes deployment...
      - echo "Assuming role: $EKS_KUBECTL_ROLE_ARN"
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - echo "Testing assumed role identity:"
      - aws sts get-caller-identity
      - echo "Testing EKS cluster access:"
      - aws eks describe-cluster --name $EKS_CLUSTER_NAME --region $AWS_REGION
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
      - sed -i 's|CONTAINER_IMAGE|'$REPOSITORY_URI:$IMAGE_TAG'|g' deploy-k8s.yml
      - kubectl apply -f deploy-k8s.yml
      - echo "Waiting for deployment rollout to complete..."
      - kubectl rollout status deployment/sql-chatbot --timeout=180s
      - echo "Verifying Kubernetes resources created:"
      - echo "Pods Status:"
      - echo writing image definition file
      - printf '[{"name":"%s","imageUri":"%s"}]' $EKS_CLUSTER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - echo printing image definition file
      - cat imagedefinitions.json

artifacts:
  files: imagedefinitions.json